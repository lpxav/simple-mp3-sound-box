/***}***********************************************
 DFPlayer - A Mini MP3 Player For Arduino
 <https://www.dfrobot.com/index.php?route=product/product&product_id=1121>
 
 ***************************************************
 This example shows the all the function of library for DFPlayer.
 
 Created 2016-12-07
 By [Angelo qiao](Angelo.qiao@dfrobot.com)
 
 GNU Lesser General Public License.
 See <http://www.gnu.org/licenses/> for details.
 All above must be included in any redistribution
 ****************************************************/

/***********Notice and Trouble shooting***************
 1.Connection and Diagram can be found here
<https://www.dfrobot.com/wiki/index.php/DFPlayer_Mini_SKU:DFR0299#Connection_Diagram>
 2.This code is tested on Arduino Uno, Leonardo, Mega boards
 ****************************************************/
 /***********Update by Lpxav & Justin [Lille Makers]***************
 Updated 2017-07-26
 1.Connection and Diagram can be found here
<https://www.dfrobot.com/wiki/index.php/DFPlayer_Mini_SKU:DFR0299#Connection_Diagram>
 2.This code is tested on Arduino Nano but should work on most of arduino 
 ****************************************************/

#include "Arduino.h"
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"
 
SoftwareSerial mySoftwareSerial(10, 11); // RX, TX
DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);

const int button1 = 2; // the number of the 1 st pushbutton pin
const int button2 = 3; // the number of the 2nd pushbutton pin
const int button3 = 4; // the number of the 3rd pushbutton pin
const int button4 = 5; // the number of the 4th pushbutton pin
const int button5 = 6; // the number of the 5th pushbutton pin
const int button6 = 7; // the number of the 6th pushbutton pin
const int button7 = 8; // the number of the 7th pushbutton pin
const int button8 = 9; // the number of the 8th pushbutton pin
const int button9 = 12; // the number of the 9th pushbutton pin

//int buttonState = 0; // variable for reading the pushbutton status

unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 50;    // the debounce time; increase if the output flickers

//int playState = HIGH;         // the current state of the output pin
int buttonState;             // the current reading from the input pin
int lastButtonState = LOW;   // the previous reading from the input pin

int buttonState2;             // the current reading from the input pin
int lastButtonState2 = LOW;   // the previous reading from the input pin

int buttonState3;             // the current reading from the input pin
int lastButtonState3 = LOW;   // the previous reading from the input pin

int buttonState4;             // the current reading from the input pin
int lastButtonState4 = LOW;   // the previous reading from the input pin

int buttonState5;             // the current reading from the input pin
int lastButtonState5 = LOW;   // the previous reading from the input pin

int buttonState6;             // the current reading from the input pin
int lastButtonState6 = LOW;   // the previous reading from the input pin

int buttonState7;             // the current reading from the input pin
int lastButtonState7 = LOW;   // the previous reading from the input pin

int buttonState8;             // the current reading from the input pin
int lastButtonState8 = LOW;   // the previous reading from the input pin

int buttonState9;             // the current reading from the input pin
int lastButtonState9 = LOW;   // the previous reading from the input pin


void setup()
{
  
  pinMode(button1, INPUT);
  mySoftwareSerial.begin(9600);
  Serial.begin(115200);
  
  Serial.println();
  Serial.println(F("DFRobot DFPlayer Mini Demo"));
  Serial.println(F("Initializing DFPlayer ... (May take 3~5 seconds)"));
   
  if (!myDFPlayer.begin(mySoftwareSerial)) {  //Use softwareSerial to communicate with mp3.
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while(true);
  }
  Serial.println(F("DFPlayer Mini online."));
  
  myDFPlayer.setTimeOut(500); //Set serial communictaion time out 500ms
  
  //----Set volume----
  myDFPlayer.volume(10);  //Set volume value (0~30).
  myDFPlayer.volumeUp(); //Volume Up
  myDFPlayer.volumeDown(); //Volume Down
  
  //----Set different EQ----
  myDFPlayer.EQ(DFPLAYER_EQ_NORMAL);
//  myDFPlayer.EQ(DFPLAYER_EQ_POP);
//  myDFPlayer.EQ(DFPLAYER_EQ_ROCK);
//  myDFPlayer.EQ(DFPLAYER_EQ_JAZZ);
//  myDFPlayer.EQ(DFPLAYER_EQ_CLASSIC);
//  myDFPlayer.EQ(DFPLAYER_EQ_BASS);
  
  //----Set device we use SD as default----
//  myDFPlayer.outputDevice(DFPLAYER_DEVICE_U_DISK);
  myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
//  myDFPlayer.outputDevice(DFPLAYER_DEVICE_AUX);
//  myDFPlayer.outputDevice(DFPLAYER_DEVICE_SLEEP);
//  myDFPlayer.outputDevice(DFPLAYER_DEVICE_FLASH);
  
  //----Mp3 control----
//  myDFPlayer.sleep();     //sleep
//  myDFPlayer.reset();     //Reset the module
//  myDFPlayer.enableDAC();  //Enable On-chip DAC
//  myDFPlayer.disableDAC();  //Disable On-chip DAC
//  myDFPlayer.outputSetting(true, 15); //output setting, enable the output and set the gain to 15
  
  //----Mp3 play----
 // myDFPlayer.playFolder(15, 4);  //play specific mp3 in SD:/15/004.mp3; Folder Name(1~99); File Name(1~255)
//delay(10000);// play the song 10 secondes
  //myDFPlayer.playMp3Folder(4); //play specific mp3 in SD:/MP3/0004.mp3; File Name(0~65535)
  //delay(10000); //play the song 10 secondes

  //----Read imformation----
  Serial.println(myDFPlayer.readState()); //read mp3 state
  Serial.println(myDFPlayer.readVolume()); //read current volume
  Serial.println(myDFPlayer.readEQ()); //read EQ setting
  Serial.println(myDFPlayer.readFileCounts()); //read all file counts in SD card
  Serial.println(myDFPlayer.readCurrentFileNumber()); //read current play file number
  Serial.println(myDFPlayer.readFileCountsInFolder(3)); //read fill counts in folder SD:/03
}

void loop()

///////////////////////////////////////////////// bloc bouton 1 
     {
        int reading = digitalRead(button1);
     
  // read the state of the pushbutton value:

if (reading != lastButtonState) {     
  lastDebounceTime = millis();
  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:
    buttonState = reading;
   }
  if (buttonState == HIGH) {
  myDFPlayer.stop();  
  Serial.println(("stop"));
 
   lastButtonState = reading;
  }
  else {
   myDFPlayer.playFolder(15, 1);
   Serial.println(("play bouton 1"));
 lastButtonState = reading;
  }

 }
 ///////////////////////////////////////////////// bloc bouton 2 

    {
        int reading = digitalRead(button2);
     
  // read the state of the pushbutton value:

if (reading != lastButtonState2) {     
  lastDebounceTime = millis();
  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:
    buttonState2 = reading;
   }
  if (buttonState2 == HIGH) {
  myDFPlayer.stop();  
  Serial.println(("stop"));
 
   lastButtonState2 = reading;
  }
  else {
   myDFPlayer.playFolder(15, 2);
   Serial.println(("play bouton 2"));
 lastButtonState2 = reading;
  }

 }

 ///////////////////////////////////////////////// bloc bouton 3 

    {
        int reading = digitalRead(button3);
     
  // read the state of the pushbutton value:

if (reading != lastButtonState3) {     
  lastDebounceTime = millis();
  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:
    buttonState3 = reading;
   }
  if (buttonState3 == HIGH) {
  myDFPlayer.stop();  
  Serial.println(("stop"));
 
   lastButtonState3 = reading;
  }
  else {
   myDFPlayer.playFolder(15, 3);
   Serial.println(("play bouton 3"));
 lastButtonState3 = reading;
  }

 }

 ///////////////////////////////////////////////// bloc bouton 4 

   {
        int reading = digitalRead(button4);
     
  // read the state of the pushbutton value:

if (reading != lastButtonState4) {     
  lastDebounceTime = millis();
  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:
    buttonState4 = reading;
   }
  if (buttonState4 == HIGH) {
  myDFPlayer.stop();  
  Serial.println(("stop"));
 
   lastButtonState4 = reading;
  }
  else {
   myDFPlayer.playFolder(15, 4);
   Serial.println(("play bouton 4"));
 lastButtonState4 = reading;
  }

 }

 ///////////////////////////////////////////////// bloc bouton 5 
   {
        int reading = digitalRead(button5);
     
  // read the state of the pushbutton value:

if (reading != lastButtonState5) {     
  lastDebounceTime = millis();
  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:
    buttonState5 = reading;
   }
  if (buttonState5 == HIGH) {
  myDFPlayer.stop();  
  Serial.println(("stop"));
 
   lastButtonState5 = reading;
  }
  else {
   myDFPlayer.playFolder(15, 5);
   Serial.println(("play bouton 5"));
 lastButtonState5 = reading;
  }

 }


  ///////////////////////////////////////////////// bloc bouton 6 
    {
        int reading = digitalRead(button6);
     
  // read the state of the pushbutton value:

if (reading != lastButtonState6) {     
  lastDebounceTime = millis();
  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:
    buttonState6 = reading;
   }
  if (buttonState6 == HIGH) {
  myDFPlayer.stop();  
  Serial.println(("stop"));
 
   lastButtonState6 = reading;
  }
  else {
   myDFPlayer.playFolder(15, 6);
   Serial.println(("play bouton 6"));
 lastButtonState6 = reading;
  }

 }

     
  ///////////////////////////////////////////////// bloc bouton 7 
   {
        int reading = digitalRead(button7);
     
  // read the state of the pushbutton value:

if (reading != lastButtonState7) {     
  lastDebounceTime = millis();
  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:
    buttonState7 = reading;
   }
  if (buttonState7 == HIGH) {
  myDFPlayer.stop();  
  Serial.println(("stop"));
 
   lastButtonState7 = reading;
  }
  else {
   myDFPlayer.playFolder(15, 7);
   Serial.println(("play bouton 7"));
 lastButtonState7 = reading;
  }

 }

      
 ///////////////////////////////////////////////// bloc bouton 8
   {
        int reading = digitalRead(button8);
     
  // read the state of the pushbutton value:

if (reading != lastButtonState8) {     
  lastDebounceTime = millis();
  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:
    buttonState8 = reading;
   }
  if (buttonState8 == HIGH) {
  myDFPlayer.stop();  
  Serial.println(("stop"));
 
   lastButtonState8 = reading;
  }
  else {
   myDFPlayer.playFolder(15, 8);
   Serial.println(("play bouton 8"));
 lastButtonState8 = reading;
  }

 }

  
 ///////////////////////////////////////////////// bloc bouton 9

   {
        int reading = digitalRead(button9);
     
  // read the state of the pushbutton value:

if (reading != lastButtonState9) {     
  lastDebounceTime = millis();
  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:
    buttonState9 = reading;
   }
  if (buttonState9 == HIGH) {
  myDFPlayer.stop();  
  Serial.println(("stop"));
 
   lastButtonState9 = reading;
  }
  else {
   myDFPlayer.playFolder(15, 9);
   Serial.println(("play bouton 9"));
 lastButtonState9 = reading;
  }

 }

 ///////////////////////////////////////////////// fin des etats boutons
     
     //{
  // read the state of the pushbutton value:
 // buttonState = digitalRead(button2);
//if (buttonState == HIGH) {     
 // myDFPlayer.stop();  
 // Serial.println(("stop"));
 
 // } 
 // else {
  // myDFPlayer.playFolder(15, 1);
 //  Serial.println(("play bouton 2"));
     



  //static unsigned long timer = millis();
  
  //if (millis() - timer > 0) {
   // timer = millis();
   // myDFPlayer.next();  //Play next mp3 every 0 second.
 //}

  if (myDFPlayer.available()) {
    printDetail(myDFPlayer.readType(), myDFPlayer.read()); //Print the detail message from DFPlayer to handle different errors and states.
  }

}//button1
}//button2
}//button3
}//button4    
}//button5
}//button6
}//button7
}//button8
}//button9

void printDetail(uint8_t type, int value){
  switch (type) {
    case TimeOut:
      Serial.println(F("Time Out!"));
      break;
    case WrongStack:
      Serial.println(F("Stack Wrong!"));
      break;
    case DFPlayerCardInserted:
      Serial.println(F("Card Inserted!"));
      break;
    case DFPlayerCardRemoved:
      Serial.println(F("Card Removed!"));
      break;
    case DFPlayerCardOnline:
      Serial.println(F("Card Online!"));
      break;
    case DFPlayerPlayFinished:
      Serial.print(F("Number:"));
      Serial.print(value);
      Serial.println(F(" Play Finished!"));
      break;
    case DFPlayerError:
      Serial.print(F("DFPlayerError:"));
      switch (value) {
        case Busy:
          Serial.println(F("Card not found"));
          break;
        case Sleeping:
          Serial.println(F("Sleeping"));
          break;
        case SerialWrongStack:
          Serial.println(F("Get Wrong Stack"));
          break;
        case CheckSumNotMatch:
          Serial.println(F("Check Sum Not Match"));
          break;
        case FileIndexOut:
          Serial.println(F("File Index Out of Bound"));
          break;
        case FileMismatch:
          Serial.println(F("Cannot Find File"));
          break;
        case Advertise:
          Serial.println(F("In Advertise"));
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
}
